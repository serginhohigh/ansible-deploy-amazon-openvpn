---
# tasks file for deploy-amazon-instances

 - name: Get facts about available amazon instances
   ec2_instance_facts:
     region: "{{ region }}"
   register: ec2_available

 - name: Save instances tags.Name in variable 'ec2_available_instances'
   debug:
     msg: "{{ item.tags.Name.split('-')[1] }}"
   loop: "{{ ec2_available.instances }}"
   register: ec2_available_instances

 - name: Set all instances tags in variable 'available_instances'
   set_fact:
     available_instances: "{{ ec2_available_instances.results | map(attribute='msg') | list }}"

 - name: Stop play if instances already exists
   fail:
     msg: Please remove this var '{{ item }}' from variable list
   loop: "{{ openvpn_users | list }}"
   when: "item in available_instances"

 - name: Amazon deploy instances
   ec2:
     key_name: "{{ key_pair_name }}"
     group_id: "{{ security_group_id }}"
     instance_type: "{{ instance_type }}"
     image: ami-086a09d5b9fa35dc7
     assign_public_ip: yes
     vpc_subnet_id: "{{ subnet_id }}"
     region: "{{ region }}"
     monitoring: yes
     count: 1
     instance_tags:
       Name: "openvpn-{{ item }}"
   loop: "{{ openvpn_users | list }}"
   register: ec2_deploy_results

 - name: Wait when instaces running
   pause:
     minutes: "{{ wait_time }}"

 - name: Associate new elastic IPs with each of the instances
   ec2_eip:
     device_id: "{{ item }}"
     region: "{{ region }}"
     in_vpc: yes
   loop: "{{ ec2_deploy_results.results | map(attribute='instances') | map('first') | map(attribute='id') | list }}"
   notify: Deploy local file structure
